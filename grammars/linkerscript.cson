'scopeName': 'source.linker'
'name': 'Linker Script'
'fileTypes': ['ld', 'dld']

patterns: [
  {
    include: '#comments'
  }
  {
    include: '#control_keywords'
  }
  {
    include: '#types'
  }
  {
    include: '#hex_literals'
  }
  {
    include: '#dec_literals'
  }
  {
    include: '#oct_literals'
  }
  {
    include: '#bin_literals'
  }
  {
    include: '#location_counter'
  }
  {
    include: '#dot_symbols'
  }
  {
    include: '#quoted_symbols'
  }
]

repository:
  comments:
    patterns: [
      {
        begin: '/\\*'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.dts'
        end: '\\*/'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.dts'
        name: 'comment.block.scilab'
      }
    ]
  control_keywords:
    patterns: [
      {
        match: '''(?x) \\b(?: ABSOLUTE |ADDR |ALIGN |ALIAS |ASSERT |AT
          |BIND |BLOCK |BYTE |CACHE |COPYTABLE |CLONE |COMMON |CONSTRUCTORS
          |CRC16 |CRC32 |CREATE_OBJECT_SYMBOLS |DEFINED |DISCARD
          |ENTRY |EXCLUDE_FILE |EXTERN |FILL |GROUP |KEEP
          |LENGTH |LOAD |LOADADDR |LONG |MEMORY |NEXT |NOLOAD
          |OPTIONAL |ORIGIN |OUTPUT_ARCH |OUTPUT_FORMAT |OVERFLOW |OVERLAY
          |PHDRS |PROFILE |PROVIDE |PROVIDE_HIDDEN |REGISTER |QUAD
          |SECTIONS |SHORT |SORT |STORE |SIZEOF |SIZEOF_HEADERS |TABLE )\\b
        '''
        name: 'keyword.control.linker'
      }
    ]
  types:
    patterns: [
      {
        match: '(?x) \\b(?: BSS |COMMENT |CONST |DATA |TEXT |BTEXT )\\b'
        name: 'support.function.builtin.linker'
      }
    ]
  hex_literals:
    patterns: [
      {
        match: '\\b0[Xx][0-9A-Fa-f]*\\b'
        name: 'constant.numeric.hex.linker'
      }
  ]
  dec_literals:
    patterns: [
      {
        match: '\\b[1-9][0-9]*[KM]?\\b'
        name: 'constant.numeric.integer.linker'
      }
  ]
  oct_literals:
    patterns: [
      {
        match: '\\b0[0-7]*\\b'
        name: 'constant.numeric.octal.linker'
      }
  ]
  bin_literals:
    patterns: [
      {
        match: '\\b[01]*[Bb]\\b'
        name: 'constant.numeric.octal.linker'
      }
  ]
  location_counter:
    patterns: [
      {
        match: '\\B\\.\\B'
        name: 'variable.language.linker'
      }
  ]
  dot_symbols:
    patterns: [
      {
        match: '(?x) (?: \\B\\.[A-Za-z_\\.0-9\\-]*)'
        name: 'variable.other.linker'
      }
    ]
  quoted_symbols:
    patterns: [
      {
        match: '(?x) (?: \\"[A-Za-z_\\.0-9\\-\\ ]*\\")'
        name: 'variable.string.linker'
      }
    ]
